<?php

namespace QRBundle\Repository;

/**
* QRRepository
*
* This class was generated by the Doctrine ORM. Add your own custom
* repository methods below.
*/
class SigRepository extends \Doctrine\ORM\EntityRepository
{



    public function getnbrsig()
    {
        $rawSql="select count(vu) as nbs from signaler WHERE vu=0 and sig=1";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();

    }


    public function getsignaler()
    {
        $rawSql="SELECT username,titre_question,contenu_question,date_question,cause,date_signaler,s.id as id,q.id_question as idq from question q join fos_user f ON q.id=f.id JOIN signaler s on q.id_question=s.id_question WHERE (vu=0 AND sig=1)";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();

    }


    public function  setsiglu($id,$id_q)
    {
        $rawSql="UPDATE  signaler set vu=1 where (id=$id AND id_question=$id_q)";

        $stmt = $this->getEntityManager()->getConnection()->executeUpdate($rawSql);

    }

    public function  suppquestsign($id,$id_q)
    {
        $rawSql="UPDATE  signaler set sig=0 where (id=$id AND id_question=$id_q)";
        $rawSql1="UPDATE  question set etat_question=0 where ( id_question=$id_q)";

        $stmt = $this->getEntityManager()->getConnection()->executeUpdate($rawSql);
        $stmt1=$this->getEntityManager()->getConnection()->executeUpdate($rawSql1);

    }




}