<?php

namespace QRBundle\Repository;

/**
 * QRRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QrRepository extends \Doctrine\ORM\EntityRepository
{


    public function ajouterQuestionSound($usr,$date,$titre,$contenu)
    {

        $rawSql="INSERT into question(id,date_question,titre_question,contenu_question,etat_question) VALUES($usr,'19/04/2019',$titre,$contenu,1) ";

        $stmt = $this->getEntityManager()->getConnection()->executeUpdate($rawSql);


        return $stmt;


    }

    public  function  getNombreReponseParPost(){

      //  $rawSql = "SELECT  COUNT(etat_question) as nb FROM question where id=$test";
        $rawSql = "SELECT question.id AS id_test,id_question AS idq,date_question,titre_question,contenu_question,etat_question,(SELECT COUNT(etat_question)  FROM question WHERE (id=id_test AND etat_question=1)) as nb,(SELECT COUNT(etat_reponse) FROM reponse WHERE(reponse.id_question=idq AND etat_reponse=1)) as nbr,username   FROM question JOIN fos_user on question.id=fos_user.id WHERE etat_question=1";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();



    }

    public  function  lastLogin(){


        $rawSql = "SELECT username,SUBSTR(TIMEDIFF(CURRENT_TIMESTAMP,last_login),1,LOCATE (':',TIMEDIFF(CURRENT_TIMESTAMP,last_login))-1) AS p from fos_user ORDER BY last_login DESC LIMIT 5";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();


    }

    public  function  recentReplies(){


        $rawSql = "SELECT id_reponse as idr,contenu_reponse,date_reponse,username,(SELECT username   FROM reponse JOIN question on question.id_question = reponse.id_question JOIN fos_user ON question.id= fos_user.id where reponse.id_reponse=idr) as t  FROM reponse JOIN fos_user on reponse.id=fos_user.id WHERE etat_reponse=1 ORDER BY date_reponse DESC LIMIT 5";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();



    }

    public function myPosts($id_user)
    {

       $rawSql="SELECT question.id AS id_test,id_question AS idq,date_question,titre_question,contenu_question,etat_question,(SELECT COUNT(etat_question)  FROM question WHERE (id=id_test AND etat_question=1)) as nb,(SELECT COUNT(etat_reponse) FROM reponse WHERE(reponse.id_question=idq AND etat_reponse=1)) as nbr,username   FROM question JOIN fos_user on question.id=fos_user.id WHERE question.id=$id_user AND etat_question=1";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();

    }

    public function getQuestionParId($id_q)
    {
        $rawSql="SELECT *FROM question WHERE id_question=$id_q AND etat_question=1";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();

    }


    public function modifierQuestion($id_q,$titre_q,$contenu_q)
    {

        $rawSql="UPDATE question SET titre_question=$titre_q,contenu_question=$contenu_q  WHERE id_question=$id_q";

        $stmt = $this->getEntityManager()->getConnection()->executeUpdate($rawSql);


        return $stmt;

    }


    public function supprimerQuestion($id_q)
    {

        $rawSql="UPDATE question set etat_question=0 WHERE id_question=$id_q";
        $rawSql1="UPDATE reponse set etat_reponse=0 WHERE id_question=$id_q";
        $rawSq2="UPDATE  signaler set sig=0 where (id_question=$id_q)";

        $this->getEntityManager()->getConnection()->executeUpdate($rawSql);
        $this->getEntityManager()->getConnection()->executeUpdate($rawSql1);
        $this->getEntityManager()->getConnection()->executeUpdate($rawSq2);




    }



    public  function  getexistsig($id,$id_q)
    {

        $rawSql="SELECT sig from signaler WHERE (id_question=$id_q AND id=$id)";

        $stmt = $this->getEntityManager()->getConnection()->prepare($rawSql);
        $stmt->execute([]);

        return $stmt->fetchAll();

    }

}
