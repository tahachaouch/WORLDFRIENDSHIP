<?php
/**
 * Created by PhpStorm.
 * User: ASUS
 * Date: 21/03/2019
 * Time: 23:05
 */

namespace BlogBundle\Controller;


use BlogBundle\BlogBundle;
use BlogBundle\Entity\Article;

use BlogBundle\Entity\Categorie;
use BlogBundle\Entity\Commentarticle;
use BlogBundle\Entity\likearticle;
use BlogBundle\Form\CommentarticleType;
use BlogBundle\Form\likearticleType;
use UserBundle\Entity\User;

use BlogBundle\Form\ArticleType;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\File\Exception\FileException;

use Symfony\Component\Serializer\Serializer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;

use Symfony\Component\HttpFoundation\JsonResponse;
class ArticleController extends Controller
{
    public function listAction(Request $request)
    {$this->denyAccessUnlessGranted("IS_AUTHENTICATED_FULLY");
        $em = $this->getDoctrine()->getManager();

        $article = $em->getRepository("BlogBundle:Article")->findAll();

        $dql = "select Article from BlogBundle:Article Article";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            4/*limit per page*/
        );
        //recent posts

        $dql = "select Article from BlogBundle:Article Article ORDER BY Article.cree DESC ";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
           4/*limit per page*/);
        $em1 = $this->getDoctrine()->getManager();
        $Categorie = $em1->getRepository("BlogBundle:Categorie")->findAll();
        $em2 = $this->getDoctrine()->getManager();
        $Tags = $em2->getRepository("BlogBundle:Tag")->findAll();

        return $this->render("BlogBundle:Article:Articles.html.twig",
            array('Article' => $article,'pagination' => $pagination,'Categorie'=>$Categorie,'Tag'=>$Tags
            ));
    }

    public function ajoutAction(Request $request)
    {$this->denyAccessUnlessGranted("IS_AUTHENTICATED_FULLY");
        $article = new Article();
        $article->setCree(new \DateTime('now'));

        $form = $this->createForm(ArticleType::class, $article);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {

            /**
             * @var UploadedFile $file
             */


            $file = $article->getImage();

            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            // Move the file to the directory where brochures are stored
            try{
            $file->move(
                $this->getParameter('images_directory'),$fileName);

        } catch (FileException $e) {
        // ... handle exception if something happens during file upload
    }

           $article->setImage($fileName);
            $article->setIduser($user=$this->getUser());
            $em = $this->getDoctrine()->getManager();

            $em->persist($article);
            $em->flush();
            return $this->redirectToRoute("blog_affiche");
        }
        return $this->render("BlogBundle:Article:Add.html.twig", array(
            'form' => $form->createView()
        ));
    }
        /**
         * @return string
         */
        private function generateUniqueFileName()
        {
            // md5() reduces the similarity of the file names generated by
            // uniqid(), which is based on timestamps
            return md5(uniqid());
        }




    public function detailsAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository("BlogBundle:Article")
            ->find($id);
        $title = $Article->getTitreArticle();
        $content = $Article->getBlog();
        $date = $Article->getCree();
        $image = $Article->getImage();
        $tags = $Article->getTags();
        $user = $Article->getIduser();
        $likes = $Article->getLikeCount();
        $comments = $Article->getCommentCount();

        //commentaire ajout
//
        $Comment = new Commentarticle();

        $Comment->setIdArticle($Article);
        $Comment->setIdUser($this->getUser());
        $Comment->setDateComment(new \DateTime('now'));
         $form = $this->createForm(CommentarticleType::class, $Comment);
        $form->handleRequest($request);
        if ($form->isSubmitted()) {
            $em = $this->getDoctrine()->getManager();

            $em->persist($Comment);
            $em->flush();
            $Article->setNbreComment($Article->getNbreComment()+1);

            $em->flush();

            return $this->redirectToRoute('blog_single', array('id'=>$id));
        }


        $dql = "select Commentarticle from BlogBundle:Commentarticle Commentarticle WHERE Commentarticle.idArticle=$id";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $Commentaires = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            3/*limit per page*/
        );

        $test=$em->getRepository("BlogBundle:likearticle")->findBy(array('idArticle'=>$id,'idUser'=>$this->getUser()));
        $aime=count($test);

        return $this->render("BlogBundle:Article:SingleArticle.html.twig"
            ,array(
                "id"=>$id,
                "titreArticle"=>$title,
                "blog"=>$content,
                "cree"=>$date,
                "image"=>$image,
                "tags" => $tags,
                "Article"=>$Article,
                "iduser" => $user->getUsername(),
                "likes"=>$likes,

                "aime"=>$aime,
                "comments"=>$comments,

                "form" => $form->createView(),
                "Commentaires" => $Commentaires,
            ));
    }
    public function deleteAction(Request $request)
    {
        $id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository("BlogBundle:Article")->find($id);
        $em->remove($Article);
        $em->flush();
        return $this->redirectToRoute('blog_affiche');
    }
    public function updateAction(Request $request)
    {$id = $request->get('id');
        $em = $this->getDoctrine()->getManager();
        $Article = $em->getRepository("BlogBundle:Article")
            ->find($id);

        $form = $this->createForm(ArticleType::class,$Article);
        $form->handleRequest($request);

        if($form->isSubmitted())
        {    /**
         * @var UploadedFile $file
         */

            $file = $Article->getImage();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            $file->move($this->getParameter('images_directory'), $fileName);
            $Article->setImage($fileName);

            $em->persist($Article);
            $em->flush();
            return $this->redirectToRoute('blog_affiche');
        }
        return $this->render("BlogBundle:Article:updateArticle.html.twig"
            ,array("form"=>$form->createView()));
}

    public function addLikeAction($id){
        $Aime = new likearticle();
        $em=$this->getDoctrine()->getManager();
        $test=$em->getRepository("BlogBundle:likearticle")->findBy(array('idArticle'=>$id,'idUser'=>$this->getUser()));
        $p=count($test);
        if ($p==0){
            $Article = $em->getRepository("BlogBundle:Article")->find($id);
            $Aime->setIdUser($this->getUser());
            $Aime->setIdArticle($Article);
            $em->persist($Aime);
            $em->flush();
            $like=$em->getRepository("BlogBundle:likearticle")->findBy(array('idArticle'=>$id));
            $a=count($like);
            $Article->setNbreLike($a);
            $em->persist($Article);
            $em->flush();
        }


        return $this->redirectToRoute("blog_single", array(
            'id' => $id
        ));
    }

    public function deleteLikeAction($id){
        $em = $this->getDoctrine()->getManager();
        $Like = $em->getRepository("BlogBundle:likearticle")->findBy(array('idArticle'=>$id,'idUser'=>$this->getUser()));
        $Article = $em->getRepository("BlogBundle:Article")->find($id);
        $em->remove($Like[0]);
        $em->flush();
        $Article->setNbrelike($Article->getLikeCount());
        $em->persist($Article);
        $em->flush();


        return $this->redirectToRoute('blog_single', array('id'=>$id));

    }


    public function searchAjaxAction($title)

    {

        $em = $this->getDoctrine()->getManager();

        $article = $em->getRepository("BlogBundle:Article")->FindByLetters($title);
        return $this->render("BlogBundle:Article:ListArticles.html.twig",
            array('Article' => $article,
            ));
        die();
        $normalizer = new ObjectNormalizer();
        $normalizer->setCircularReferenceLimit(2);


        $normalizer->setCircularReferenceHandler(function ($article) {
            return $article->getId();
        });
        $s = new Serializer(array($normalizer));
        $articles = $s->normalize($article,'json');
        $response = new JsonResponse();
        return $response->setData(array('articles'=>$articles));
    }



    public function deleteCommentAction($id){
        $em = $this->getDoctrine()->getManager();
        $comment = $em->getRepository('BlogBundle:Commentarticle')->find($id);
        $Article=$comment->getIdArticle();
        $em->remove($comment);
        $em->flush();
        $article= $em->getRepository('BlogBundle:Article')->find($Article);
        $id=$article->getId();

        return $this->redirectToRoute('blog_single',array('id'=>$id));
    }


    //TAGs

    /**
     * @Route("/tags.json", name="Ons.index")
     * @param Request $request
     * @return \Symfony\Component\HttpFoundation\JsonResponse
     */

    public function indexAction(Request $request){
        $tagRepository = $this->getDoctrine()->getRepository('BlogBundle:Tag');
        $tags = $tagRepository->findAll();
        return $this->json($tags,200, [], ['groups' => ['public']] );

    }

    public function SearchCategorieAction(Request $request)
    {
        $id = $request->get('Categorie');


        $em = $this->getDoctrine()->getManager();
        $article = $em->getRepository("BlogBundle:Article")->findBy(array('Categorie' => $id));
        // $article = $em->getRepository("BlogBundle:Article")->findAll();

        $dql = "select Article from BlogBundle:Article Article";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            4/*limit per page*/
        );
        //recent posts

        $dql = "select Article from BlogBundle:Article Article ORDER BY Article.cree DESC ";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            4/*limit per page*/);
        $em1 = $this->getDoctrine()->getManager();
        $Categorie = $em1->getRepository("BlogBundle:Categorie")->findAll();
        $em2 = $this->getDoctrine()->getManager();
        $Tags = $em2->getRepository("BlogBundle:Tag")->findAll();

        return $this->render("BlogBundle:Article:Articles.html.twig",
            array('Article' => $article,'pagination' => $pagination,'Categorie'=>$Categorie,'Tag'=>$Tags
            ));

    }
    public function welcomeAction(Request $request)
    {$this->denyAccessUnlessGranted("IS_AUTHENTICATED_FULLY");
        $em = $this->getDoctrine()->getManager();

        $article = $em->getRepository("BlogBundle:Article")->findAll();

        $dql = "select Article from BlogBundle:Article Article";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            4/*limit per page*/
        );
        //recent posts

        $dql = "select Article from BlogBundle:Article Article ORDER BY Article.cree DESC ";
        $query = $em->createQuery($dql);
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query, /* query NOT result */
            $request->query->getInt('page', 1)/*page number*/,
            4/*limit per page*/);
        $em1 = $this->getDoctrine()->getManager();
        $Categorie = $em1->getRepository("BlogBundle:Categorie")->findAll();
        $em2 = $this->getDoctrine()->getManager();
        $Tags = $em2->getRepository("BlogBundle:Tag")->findAll();

        return $this->render("@app/Ressources/views/default/Welcome.html.twig",
            array('Article' => $article,'pagination' => $pagination,'Categorie'=>$Categorie,'Tag'=>$Tags
            ));
    }
}